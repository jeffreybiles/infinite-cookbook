name: Deploy to AWS

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: infinite-cookbook-api
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  DB_PASSWORD: ${{ secrets.DB_PASSWORD }}

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/github-actions
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        working-directory: ./terraform/backend
        run: |
          terraform init \
            -backend-config="bucket=infinite-cookbook-terraform-state" \
            -backend-config="key=backend.tfstate" \
            -backend-config="region=us-east-1"
            # -backend-config="dynamodb_table=infinite-cookbook-terraform-state-lock"

      # - name: Import existing resources if needed
      #   working-directory: ./terraform/backend
      #   continue-on-error: true
      #   run: |
      #     # Import VPC
      #     terraform import \
      #       -var="aws_account_id=${{ env.AWS_ACCOUNT_ID }}" \
      #       -var="github_repo=${{ github.repository }}" \
      #       -var="db_password=${{ env.DB_PASSWORD }}" \
      #       aws_vpc.main vpc-04b67c968ba769f27

      #     # Import public subnets
      #     terraform import \
      #       -var="aws_account_id=${{ env.AWS_ACCOUNT_ID }}" \
      #       -var="github_repo=${{ github.repository }}" \
      #       -var="db_password=${{ env.DB_PASSWORD }}" \
      #       "aws_subnet.public[0]" subnet-0a90e4d84c49c63a8

      #     terraform import \
      #       -var="aws_account_id=${{ env.AWS_ACCOUNT_ID }}" \
      #       -var="github_repo=${{ github.repository }}" \
      #       -var="db_password=${{ env.DB_PASSWORD }}" \
      #       "aws_subnet.public[1]" subnet-0f8db79cb0d3745df

      #     # Import DB subnet group
      #     terraform import \
      #       -var="aws_account_id=${{ env.AWS_ACCOUNT_ID }}" \
      #       -var="github_repo=${{ github.repository }}" \
      #       -var="db_password=${{ env.DB_PASSWORD }}" \
      #       aws_db_subnet_group.postgres infinite-cookbook-postgres


      - name: Fix DB Subnet Group
        working-directory: ./terraform/backend
        run: |
          # First try to destroy just the subnet group
          terraform destroy -auto-approve -target=aws_db_subnet_group.postgres \
            -var="aws_account_id=${{ env.AWS_ACCOUNT_ID }}" \
            -var="github_repo=${{ github.repository }}" \
            -var="db_password=${{ env.DB_PASSWORD }}"

          terraform apply -auto-approve \
            -replace=aws_db_subnet_group.postgres \
            -var="aws_account_id=${{ env.AWS_ACCOUNT_ID }}" \
            -var="github_repo=${{ github.repository }}" \
            -var="db_password=${{ env.DB_PASSWORD }}"

      - name: Debug Terraform State
        working-directory: ./terraform/backend
        run: |
          echo "Listing S3 bucket contents:"
          aws s3 ls s3://infinite-cookbook-terraform-state/
          echo "Current Terraform state:"
          terraform show
          echo "terraform vpc id:"
          terraform state show aws_vpc.main

      - name: Terraform Apply
        working-directory: ./terraform/backend
        env:
          TF_LOG: INFO
        run: |
          terraform apply -auto-approve \
            -var="aws_account_id=${{ env.AWS_ACCOUNT_ID }}" \
            -var="github_repo=${{ github.repository }}" \
            -var="db_password=${{ env.DB_PASSWORD }}"

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push image to Amazon ECR
        working-directory: ./backend
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -f Dockerfile.lambda -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest